{"remainingRequest":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/src/views/Home.vue?vue&type=template&id=1bec1ace&","dependencies":[{"path":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/src/views/Home.vue","mtime":1639302216448},{"path":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}