{"remainingRequest":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/src/views/Home.vue?vue&type=template&id=fae5bece&ref=home&","dependencies":[{"path":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/src/views/Home.vue","mtime":1639121029103},{"path":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/aleksandar/Strio-DAO/strio-dao.github.io/landing-page/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx2LWNvbD4KICAgIDx2LXJvdyBjbGFzcz0iYmciPgogICAgICA8di1jb2w+CiAgICAgICAgPHYtcm93IHN0eWxlPSJtYXJnaW4tdG9wOjIyJSIganVzdGlmeT0iY2VudGVyIiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgIDxkaXYgc3R5bGU9ImNvbG9yOndoaXRlOyBmb250LXNpemU6NzBweDsgZm9udC13ZWlnaHQ6IDgwMCI+VklERU8gU1RPUklFUzwvZGl2PgogICAgICAgICAgPGEgc3R5bGU9ImNvbG9yOndoaXRlOyB0ZXh0LWRlY29yYXRpb246bm9uZSAhaW1wb3J0YW50OyBtYXJnaW4tcmlnaHQ6IDUwcHgiIEBjbGljaz0ic2Nyb2xsTWVUbygncG9ydG8nKSI+VG9rZW5vbWljczwvYT4KICAgICAgICA8L3Ytcm93PgogICAgICAgIDx2LXJvdyBzdHlsZT0ibWFyZ2luLXRvcDogMHB4IiBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiPgogICAgICAgICAgPGgyIHN0eWxlPSJjb2xvcjp3aGl0ZTsgZm9udC13ZWlnaHQ6IDI3MCI+T3duZWQgYnkgY3JlYXRvcnMgYW5kIGNvbW11bml0eTwvaDI+CiAgICAgICAgPC92LXJvdz4KICAgICAgICA8di1yb3cgc3R5bGU9Im1hcmdpbi10b3A6IDUwcHg7IiBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiPgogICAgICAgICAgPHYtY29sIHN0eWxlPSJjb2xvcjogd2hpdGUiIGNvbHM9IjMiPgogICAgICAgICAgICAKICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8di1jb2wgc3R5bGU9ImNvbG9yOiB3aGl0ZTsiIGNvbHM9IjYiIGFsaWduPSJjZW50ZXIiPgogICAgICAgICAgICA8di1yb3cgc3R5bGU9ImJhY2tncm91bmQ6IGdyZXk7IG9wYWNpdHk6IDAuNjsgYm9yZGVyLXJhZGl1czogMzBweDsgcGFkZGluZzogMHB4OyI+CiAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjkiIHN0eWxlPSJtYXJnaW46IDBweDsgcGFkZGluZzogMHB4OyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgcGxhY2Vob2xkZXI9Ikluc2VydCB5b3VyIG1haWwiIHR5cGU9InRleHQiIHN0eWxlPSJoZWlnaHQ6NTBweDsgbWFyZ2luOjBweDsgbWFyZ2luLWxlZnQ6IDIwcHg7IHdpZHRoOjkwJTsgY29sb3I6IHdoaXRlIj4KICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIzIiBzdHlsZT0ibWFyZ2luOiAwcHg7IHBhZGRpbmc6IDBweDsiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICA8di1idG4gY2xhc3M9ImJ1dHRvbjEiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRUY0NDIzOyBjb2xvcjogd2hpdGU7IGhlaWdodDogNTBweDsgZm9udC1zaXplOiAxNXB4OyBmb250LWZhbWlseTogQWlsZXJvbjsgbWFyZ2luOiAwcHg7IGJvcmRlci1yYWRpdXM6IDMwcHg7Ij4KICAgICAgICAgICAgICAgICAgSm9pbiB3YWl0bGlzdAogICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDx2LWNvbCBzdHlsZT0iY29sb3I6IHdoaXRlIiBjb2xzPSIzIj48L3YtY29sPgogICAgICAgIDwvdi1yb3c+CiAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciIgc3R5bGU9Im1hcmdpbi10b3A6IDIwMHB4OyI+CiAgICAgICAgICA8di1idG4gc3R5bGU9ImJhY2tncm91bmQ6IG5vbmU7IG91dGxpbmU6IG5vbmU7IGJvcmRlcjpub25lOyI+CiAgICAgICAgICAgIDx2LWltZwogICAgICAgICAgICAgIGFsdD0iYXJyb3ciCiAgICAgICAgICAgICAgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL0Fycm93RG93bi5wbmciCiAgICAgICAgICAgICAgd2lkdGg9IjEwIgogICAgICAgICAgICAgIEBjbGljaz0ic2Nyb2xsKCRyZWZzLmNhcmRQYW5lbCkiCiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L3YtYnRuPgogICAgICAgIDwvdi1yb3c+CiAgICAgICAgPHYtcm93IGlkPSJjYXJkUGFuZWwiIHJlZj0iY2FyZFBhbmVsIiBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiIHN0eWxlPSJtYXJnaW4tdG9wOiAxMDBweDsgcGFkZGluZy10b3A6IDIwMHB4OyI+CiAgICAgICAgICAKICAgICAgICAgIDx2LWNvbD48L3YtY29sPgogICAgICAgICAgPHYtY29sPgogICAgICAgICAgICA8aWZyYW1lIHdpZHRoPSI1MDAiIGhlaWdodD0iMzAwIiBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkP3Y9dWpHU3QtOTNxWm8iPjwvaWZyYW1lPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDx2LWNvbCBzdHlsZT0iY29sb3I6IHdoaXRlOyBtYXJnaW4tbGVmdDogMTAwcHg7Ij4KICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgIDx2LWNvbD4KCiAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICA8di1jb2wgc3R5bGU9Im1hcmdpbi1yaWdodDogMTBweDsiPgogICAgICAgICAgICAgICAgICA8di1yb3cgc3R5bGU9Im1hcmdpbi1ib3R0b206IDEwcHg7Ij4KICAgICAgICAgICAgICAgICAgICA8aDE+Rm9yIGNyZWF0b3JzPC9oMT4KICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgPHYtcm93IHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgSXNzdWUgQ3JlYXRvciB0b2tlbnMgYW5kIGxldCB5b3VyIDxicj4KICAgICAgICAgICAgICAgICAgICBzdXBwb3J0ZXJzIGZ1bmQgYW5kIHByb2ZpdCBmcm9tIDxicj4KICAgICAgICAgICAgICAgICAgICB5b3VyIHdvcmsKICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgPHYtcm93IHN0eWxlPSJtYXJnaW4tYm90dG9tOiAzMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgVXBsb2FkIGNvbnRlbnQgYXMgTkZUcyBhbmQgPGJyPgogICAgICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGUgSVAgYW1vbmdzdCB5b3VyIDxicj4KICAgICAgICAgICAgICAgICAgICBjb21tdW5pdHkKICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibXItNCIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNFRjQ0MjM7IGNvbG9yOiB3aGl0ZTsgaGVpZ2h0OiA1MHB4OyBmb250LXNpemU6IDE1cHg7IGZvbnQtZmFtaWx5OiBBaWxlcm9uOyBwYWRkaW5nOiAyMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgICBKb2luIGNyZWF0b3Igd2FpdGxpc3QKICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgCiAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgPHYtY29sPjwvdi1jb2w+CgogICAgICAgIDwvdi1yb3c+CiAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDIwMHB4OyBtYXJnaW4tdG9wOiA4MHB4OyI+CiAgICAgICAgICAKICAgICAgICAgIDx2LWNvbD48L3YtY29sPgogICAgICAgICAgPHYtY29sIHN0eWxlPSJjb2xvcjogd2hpdGU7IG1hcmdpbi1yaWdodDogNTBweDsiID4KICAgICAgICAgICAgPHYtcm93IHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxMHB4OyI+CiAgICAgICAgICAgICAgPGgxPkZvciB0aGUgY29tbXVuaXR5PC9oMT4KICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgPHYtcm93IHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxMHB4OyI+CiAgICAgICAgICAgICAgSW52ZXN0IGluIHlvdXIgZmF2b3VyaXRlIGNyZWF0b3IgdG9rZW5zIDxicj4KICAgICAgICAgICAgICBhbmQgcHJvZml0IGZyb20gdGhlaXIgc2hpbm55IGNhcmVlcnMgPGJyPgogICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICA8di1yb3cgc3R5bGU9Im1hcmdpbi1ib3R0b206IDMwcHg7Ij4KICAgICAgICAgICAgICBHZXQgYSBzaGFyZSBvZiB0aGVpciB3b3JrJ3MgSVAgYXMgTkZUcyA8YnI+CiAgICAgICAgICAgICAgYW5kIGJlIHJld2FyZGVkIGJ5IHRoZWlyIGNvbnRlbnQgPGJyPgogICAgICAgICAgICAgIHN1Y2Nlc3MKICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgIDx2LWJ0biBjbGFzcz0ibXItNCIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNFRjQ0MjM7IGNvbG9yOiB3aGl0ZTsgaGVpZ2h0OiA1MHB4OyBmb250LXNpemU6IDE1cHg7IGZvbnQtZmFtaWx5OiBBaWxlcm9uOyBwYWRkaW5nOiAyMHB4OyI+CiAgICAgICAgICAgICAgICBKb2luIHRoZSBjb21tdW5pdHkKICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgPGlmcmFtZSB3aWR0aD0iNTAwIiBoZWlnaHQ9IjMwMCIgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZD92PXVqR1N0LTkzcVpvIj48L2lmcmFtZT4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8di1jb2w+PC92LWNvbD4KCiAgICAgICAgPC92LXJvdz4KICAgICAgPC92LWNvbD4KICAgIDwvdi1yb3c+CiAgICA8di1yb3cgc3R5bGU9Im1pbi1oZWlnaHQ6IDEwMDBweDsiPgogICAgICA8di1jb2wgaWQ9InBhZ2UzIj4KICAgICAgICA8di1yb3cganVzdGlmeT0iY2VudGVyIiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgIDxkaXYgc3R5bGU9ImNvbG9yOmdyYXk7IGZvbnQtc2l6ZTogNzBweDsgZm9udC13ZWlnaHQ6IDYwMDsgbWFyZ2luLXRvcDogMjBweDsiPkJFIFBBUlQgT0YgSVQ8L2Rpdj4KICAgICAgICA8L3Ytcm93PgogICAgICAgIDx2LXJvdyBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiPgogICAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTogaW5saW5lOyBtYXJnaW4tdG9wOiA2MHB4OyI+CiAgICAgICAgICAgIDx2LWltZwogICAgICAgICAgICAgIHdpZHRoPSIzMDBweDsiCiAgICAgICAgICAgICAgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL0dyb3VwSW1nLnBuZyIKICAgICAgICAgICAgPjwvdi1pbWc+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3Ytcm93PgogICAgICAgIDx2LXJvdyBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiPgogICAgICAgICAgPGRpdiBzdHlsZT0iY29sb3I6Z3JheTsgZm9udC1zaXplOiA0MHB4OyBmb250LXdlaWdodDogNTAwOyBtYXJnaW4tdG9wOiAxMDBweDsiPkEgdmlkZW8gc3RyZWFtaW5nIHBsYXRmb3JtIHRoYXQgeW91IG93bjwvZGl2PgogICAgICAgIDwvdi1yb3c+CiAgICAgIDwvdi1jb2w+CiAgICA8L3Ytcm93PgogICAgPHYtcm93PgogICAgICA8di1jb2wgaWQ9InBhZ2U0Ij4KICAgICAgICA8di1yb3cganVzdGlmeT0iY2VudGVyIiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiA2NTBweDsiPgogICAgICAgICAgICA8di1pbWcKICAgICAgICAgICAgICBpZD0iaW1nMSIKICAgICAgICAgICAgICBjb250YWluCiAgICAgICAgICAgICAgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL3BhZ2U0Y2lyY2xlLnBuZyIKICAgICAgICAgICAgPjwvdi1pbWc+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9ImltZzEiIHN0eWxlPSJjb2xvcjp3aGl0ZTsgcG9zaXRpb246IHJlbGF0aXZlOyB0b3A6LTM1MHB4OyBsZWZ0OiAzMyU7IGZvbnQtc2l6ZTogNDBweDsgZm9udC13ZWlnaHQ6IDUwMDsiPkhvdyBpdCB3b3JrczwvbGFiZWw+CiAgICAgICAgICAgIDx2LXNoZWV0CiAgICAgICAgICAgICAgbWF4LXdpZHRoPSIzNTAiCiAgICAgICAgICAgICAgY2xhc3M9InJvdW5kZWQtcGlsbCBteC1hdXRvIHRyYW5zaXRpb24tc3dpbmcgc2Vjb25kYXJ5IgogICAgICAgICAgICAgIGVsZXZhdGlvbj0iMTIiCiAgICAgICAgICAgICAgaGVpZ2h0PSIxMjgiCiAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiCiAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOndoaXRlOyBwb3NpdGlvbjogcmVsYXRpdmU7IHRvcDotNTAwcHg7IGxlZnQ6IC0zNTBweDsgb3BhY2l0eTogMC45IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciI+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMyIgc3R5bGU9Im1hcmdpbi10b3A6IDMwcHg7Ij4KICAgICAgICAgICAgICAgICAgPHYtaW1nIGNvbnRhaW50IHdpZHRoPSI0NSIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAyMHB4OyIgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL2ljb25zSElXL3BhbGxldGUucG5nIj48L3YtaW1nPgogICAgICAgICAgICAgICAgICA8di1kaXZpZGVyIHZlcnRpY2FsPjwvdi1kaXZpZGVyPgogICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZsb2F0OmxlZnQ7IG1hcmdpbi1sZWZ0OiAxMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgQ3JlYXRvcnMgaXNzdWUgdGhlaXIgb3duIDxicj4KICAgICAgICAgICAgICAgICAgICB0b2tlbiBhbmQgY29udGVudCBhcyA8YnI+CiAgICAgICAgICAgICAgICAgICAgTkZUcwogICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgIDwvdi1zaGVldD4KICAgICAgICAgICAgPHYtc2hlZXQKICAgICAgICAgICAgICBtYXgtd2lkdGg9IjM1MCIKICAgICAgICAgICAgICBjbGFzcz0icm91bmRlZC1waWxsIG14LWF1dG8gdHJhbnNpdGlvbi1zd2luZyBzZWNvbmRhcnkiCiAgICAgICAgICAgICAgZWxldmF0aW9uPSIxMiIKICAgICAgICAgICAgICBoZWlnaHQ9IjEyOCIKICAgICAgICAgICAgICB3aWR0aD0iMTAwJSIKICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6d2hpdGU7IHBvc2l0aW9uOiByZWxhdGl2ZTsgdG9wOi00NzBweDsgbGVmdDogLTMzMHB4OyBvcGFjaXR5OiAwLjk7IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciI+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMyIgc3R5bGU9Im1hcmdpbi10b3A6IDMwcHg7Ij4KICAgICAgICAgICAgICAgICAgPHYtaW1nIGNvbnRhaW4gd2lkdGg9IjQ1IiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDIwcHg7IiBzcmM9Ii4uL2Fzc2V0cy9pbWFnZXMvaWNvbnNISVcvMi1Vc2VyLnBuZyI+PC92LWltZz4KICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlciB2ZXJ0aWNhbD48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmbG9hdDpsZWZ0OyBtYXJnaW4tbGVmdDogMTBweDsiPgogICAgICAgICAgICAgICAgICAgIFN1cHBvcnRlcnMgYnV5IDxicj4KICAgICAgICAgICAgICAgICAgICBDcmVhdG9ycyB0b2tlbnMgdG8gb3duPGJyPgogICAgICAgICAgICAgICAgICAgIGEgc2hhcmUgb2ZmIGFsbCB0aGVpciA8YnI+CiAgICAgICAgICAgICAgICAgICAgY29udGVudCBORlRzIG9yIG1pc3QgaW5kaXZpZHVhbCA8YnI+CiAgICAgICAgICAgICAgICAgICAgTkZUcwogICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgIDwvdi1zaGVldD4KICAgICAgICAgICAgPHYtc2hlZXQKICAgICAgICAgICAgICBtYXgtd2lkdGg9IjM1MCIKICAgICAgICAgICAgICBjbGFzcz0icm91bmRlZC1waWxsIG14LWF1dG8gdHJhbnNpdGlvbi1zd2luZyBzZWNvbmRhcnkiCiAgICAgICAgICAgICAgZWxldmF0aW9uPSIxMiIKICAgICAgICAgICAgICBoZWlnaHQ9IjEyOCIKICAgICAgICAgICAgICB3aWR0aD0iMTAwJSIKICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6d2hpdGU7IHBvc2l0aW9uOiByZWxhdGl2ZTsgdG9wOi00NDBweDsgbGVmdDogLTMwMHB4OyBvcGFjaXR5OiAwLjkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1yb3cganVzdGlmeT0iY2VudGVyIiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIzIiBzdHlsZT0ibWFyZ2luLXRvcDogMzBweDsiPgogICAgICAgICAgICAgICAgICA8di1pbWcgY29udGFpbiB3aWR0aD0iNDUiIHN0eWxlPSJtYXJnaW4tbGVmdDogMjBweDsiIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy9pY29uc0hJVy9QYXBlci1Eb3dubG9hZC5wbmciPjwvdi1pbWc+CiAgICAgICAgICAgICAgICAgIDx2LWRpdmlkZXIgdmVydGljYWw+PC92LWRpdmlkZXI+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPHYtY29sPgogICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZmxvYXQ6bGVmdDsgbWFyZ2luLWxlZnQ6IDEwcHg7Ij4KICAgICAgICAgICAgICAgICAgICBORlQgaG9sZGVycyB3aWxsIG93biBhIDxicj4KICAgICAgICAgICAgICAgICAgICBzaGFyZSBvZiBJUCBvZiB0aGUgY29udGVudCA8YnI+CiAgICAgICAgICAgICAgICAgICAgYW5kIHdpbGwgYmUgYWJsZSB0byBzZWxsIGl0IG9uIHRoZSA8YnI+CiAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5IG1hcmtldAogICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgIDwvdi1zaGVldD4KICAgICAgICAgICAgPHYtc2hlZXQKICAgICAgICAgICAgICBtYXgtd2lkdGg9IjM1MCIKICAgICAgICAgICAgICBjbGFzcz0icm91bmRlZC1waWxsIG14LWF1dG8gdHJhbnNpdGlvbi1zd2luZyBzZWNvbmRhcnkiCiAgICAgICAgICAgICAgZWxldmF0aW9uPSIxMiIKICAgICAgICAgICAgICBoZWlnaHQ9IjEyOCIKICAgICAgICAgICAgICB3aWR0aD0iMTAwJSIKICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6d2hpdGU7IHBvc2l0aW9uOiByZWxhdGl2ZTsgdG9wOiAtODUwcHg7IGxlZnQ6IDM1MHB4OyBvcGFjaXR5OiAwLjkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1yb3cganVzdGlmeT0iY2VudGVyIiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIzIiBzdHlsZT0ibWFyZ2luLXRvcDogMzBweDsiPgogICAgICAgICAgICAgICAgICA8di1pbWcgY29udGFpbiB3aWR0aD0iNDUiIHN0eWxlPSJtYXJnaW4tbGVmdDogMjBweDsiIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy9pY29uc0hJVy9BcnJvdy5wbmciPjwvdi1pbWc+CiAgICAgICAgICAgICAgICAgIDx2LWRpdmlkZXIgdmVydGljYWw+PC92LWRpdmlkZXI+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPHYtY29sPgogICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZmxvYXQ6bGVmdDsgbWFyZ2luLWxlZnQ6IDEwcHg7Ij4KICAgICAgICAgICAgICAgICAgICBWaWV3ZXJzIHdpbGwgZW5qb3kgdGhlIGNvbnRlbnQgPGJyPgogICAgICAgICAgICAgICAgICAgIGZyZWVseSBvbiB0aGUgcGxhdGZvcm0gYW5kIHRoZWlyIDxicj4KICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbiB3aWxsIGRldGVybWluZSA8YnI+CiAgICAgICAgICAgICAgICAgICAgY29udGVudCBzdWNjZXNzCiAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgPC92LXNoZWV0PgogICAgICAgICAgICA8di1zaGVldAogICAgICAgICAgICAgIG1heC13aWR0aD0iMzUwIgogICAgICAgICAgICAgIGNsYXNzPSJyb3VuZGVkLXBpbGwgbXgtYXV0byB0cmFuc2l0aW9uLXN3aW5nIHNlY29uZGFyeSIKICAgICAgICAgICAgICBlbGV2YXRpb249IjEyIgogICAgICAgICAgICAgIGhlaWdodD0iMTI4IgogICAgICAgICAgICAgIHdpZHRoPSIxMDAlIgogICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjp3aGl0ZTsgcG9zaXRpb246IHJlbGF0aXZlOyB0b3A6IC04MjBweDsgbGVmdDogMzMwcHg7IG9wYWNpdHk6IDAuOSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx2LXJvdyBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiPgogICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjMiIHN0eWxlPSJtYXJnaW4tdG9wOiAzMHB4OyI+CiAgICAgICAgICAgICAgICAgIDx2LWltZyBjb250YWluIHdpZHRoPSI0NSIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAyMHB4OyIgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL2ljb25zSElXL1dhbGxldC5wbmciPjwvdi1pbWc+CiAgICAgICAgICAgICAgICAgIDx2LWRpdmlkZXIgdmVydGljYWw+PC92LWRpdmlkZXI+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPHYtY29sPgogICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZmxvYXQ6bGVmdDsgbWFyZ2luLWxlZnQ6IDEwcHg7Ij4KICAgICAgICAgICAgICAgICAgICBTdHJpbyBEQU8ncyB0cmVhc3VyeSBjb2xsZWN0cyBhIDxicj4KICAgICAgICAgICAgICAgICAgICBmZWUgb3ZlciBDcmVhdG9yIHRva2VuPGJyPgogICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9ucyBhbmQgTkZUIG1pbnRzPGJyPgogICAgICAgICAgICAgICAgICAgIGFuZCBvdGhlciBjb250ZW50IHN1Y2Nlc3MgPGJyPgogICAgICAgICAgICAgICAgICAgIHJlbGF0ZWQgbWV0cmljcwogICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgIDwvdi1zaGVldD4KICAgICAgICAgICAgPHYtc2hlZXQKICAgICAgICAgICAgICBtYXgtd2lkdGg9IjM1MCIKICAgICAgICAgICAgICBjbGFzcz0icm91bmRlZC1waWxsIG14LWF1dG8gdHJhbnNpdGlvbi1zd2luZyBzZWNvbmRhcnkiCiAgICAgICAgICAgICAgZWxldmF0aW9uPSIxMiIKICAgICAgICAgICAgICBoZWlnaHQ9IjEyOCIKICAgICAgICAgICAgICB3aWR0aD0iMTAwJSIKICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6d2hpdGU7IHBvc2l0aW9uOiByZWxhdGl2ZTsgdG9wOiAtNzkwcHg7IGxlZnQ6IDMwMHB4OyBvcGFjaXR5OiAwLjkiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1yb3cganVzdGlmeT0iY2VudGVyIiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIzIiBzdHlsZT0ibWFyZ2luLXRvcDogMzBweDsiPgogICAgICAgICAgICAgICAgICA8di1pbWcgY29udGFpbiB3aWR0aD0iNDUiIHN0eWxlPSJtYXJnaW4tbGVmdDogMjBweDsiIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy9pY29uc0hJVy9TdGFyLnBuZyI+PC92LWltZz4KICAgICAgICAgICAgICAgICAgPHYtZGl2aWRlciB2ZXJ0aWNhbD48L3YtZGl2aWRlcj4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmbG9hdDpsZWZ0OyBtYXJnaW4tbGVmdDogMTBweDsiPgogICAgICAgICAgICAgICAgICAgIFN1cHBvcnRlcnMgYW5kIENyZWF0b3JzIGFyZSA8YnI+CiAgICAgICAgICAgICAgICAgICAgcmV3YXJkZWQgYnkgU3RyaW8gREFPJ3MgPGJyPgogICAgICAgICAgICAgICAgICAgIHRyZWFzdXJ5IGV2ZXJ5IG1vbnRoIGFjY29yZGluZyA8YnI+CiAgICAgICAgICAgICAgICAgICAgdG8gY29udGVudCBzdWNjZXNzIGFuZCBORlQgPGJyPgogICAgICAgICAgICAgICAgICAgIG93bmVyc2hpcAogICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgIDwvdi1zaGVldD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1yb3c+CiAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciIgc3R5bGU9Im1hcmdpbi10b3A6LTYwMHB4OyI+CiAgICAgICAgICA8di1idG4gZGFyayBzdHlsZT0icGFkZGluZzo1MHB4OyIgY2xhc3M9InJvdW5kZWQtcGlsbCI+CiAgICAgICAgICAgIDx2LWltZwogICAgICAgICAgICAgIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy9TdHJpb0Rhb0xvZ28xLnBuZyIKICAgICAgICAgICAgPjwvdi1pbWc+CiAgICAgICAgICA8L3YtYnRuPgogICAgICAgIDwvdi1yb3c+CiAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciI+CiAgICAgICAgICA8c3BhbiBzdHlsZT0iY29sb3I6d2hpdGU7IG1hcmdpbi10b3A6NjBweDsiIGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciI+CiAgICAgICAgICAgIFN0cmlvIGlzIGEgZnVsbC1ibG93biBEQU8gZnJvbSBkYXkgb25lLCBnb3Zlcm5lZCwgbWFuYWdlZCA8YnI+CiAgICAgICAgICAgIGFuZCBidWlsdCBieSBhIGdyb3VwIG9mIGRpc3RyaWJ1dGVkIGNvbnRyaWJ1dG9ycyBhbmQgY29yZSB0ZWFtIDxicj4KICAgICAgICAgICAgbWVtYmVycyBwbGVkZ2VkIHVuZGVyIFN0cmlv4oCZcyBjb250cmlidXRpb24uIDxicj4KICAgICAgICAgICAgU3RyaW8gd2lsbCBsYXVuY2ggaXTigJlzIG93biBTVFIgdG9rZW4gb24gdXBjb21pbmcgSURPLCBhbGxvd2luZyA8YnI+CiAgICAgICAgICAgIGV2ZXJ5b25lIHRvIHRha2UgcGFydCBpbiB0aGUgY2FwIHRhYmxlLCB2b3RlIGZvciB0aGUgREFPIDxicj4KICAgICAgICAgICAgZ292ZXJuYW5jZSBhbmQgYmUgcmV3YXJkZWQgYnkgY29udHJpYnV0aW9ucyBvbiB0aGUgcHJvamVjdC4gPGJyPgogICAgICAgICAgPC9zcGFuPgogICAgICAgIDwvdi1yb3c+CiAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDIwcHg7Ij4KICAgICAgICAgIDx2LWJ0biBzdHlsZT0iYmFja2dyb3VuZDogI0VGNDQyMzsgY29sb3I6IHdoaXRlOyBtYXJnaW4tcmlnaHQ6IDIwcHg7Ij4KICAgICAgICAgICAgQmVjb21lIGEgbWVtYmVyIG9mIHRoZSBEQU8KICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICA8di1idG4gZGFyayBocmVmPSJodHRwczovL3d3dy5ub3Rpb24uc28vU3RyaW8tV2lraS1jZjBlZjk1ODFmOGE0N2FlODM0OTZjNzlmYjA5ZGE1YSIgdGFyZ2V0PSJfYmxhbmsiIHN0eWxlPSJib3JkZXI6IDFweCBzb2xpZCAjRUY0NDIzOyBtYXJnaW4tdG9wOiAzMHB4OyBtYXJnaW4tYm90dG9tOiAzMHB4OyI+CiAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJtYXJnaW4tcmlnaHQ6MTBweDsiPlN0cmlvIFdpa2k8L3NwYW4+CiAgICAgICAgICAgIDx2LWljb24gc3R5bGU9ImhlaWdodDo1cHg7Ij5tZGktYXJyb3ctcmlnaHQ8L3YtaWNvbj4KICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgPC92LXJvdz4KICAgICAgPC92LWNvbD4KICAgIDwvdi1yb3c+CiAgICA8di1yb3cgaWQ9InBhZ2U1Ij4KICAgICAgPHYtY29sPgogICAgICAgIDx2LXJvdyByZWY9InBvcnRvIiBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiIHN0eWxlPSJjb2xvcjogd2hpdGUiPgogICAgICAgICAgPGgxIGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciIgc3R5bGU9Im1hcmdpbi10b3A6IDIwcHg7Ij4KICAgICAgICAgICAgVHVybmluZyB2aWRlbyBjb250ZW50IGludG8gZGlzdHJpYnV0ZWQgSVAgPGJyPgogICAgICAgICAgICBpcyBhIGxvbmcgdGVybSBqb3VybmV5CiAgICAgICAgICA8L2gxPgogICAgICAgIDwvdi1yb3c+CiAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciIgc3R5bGU9ImNvbG9yOiB3aGl0ZSI+CiAgICAgICAgICA8aDMgc3R5bGU9Im1hcmdpbi10b3A6IDIwcHg7Ij5IZXJlJ3MgYSBzbmVhayBwZWFrIGludG8gb3VyIGZpcnN0IG1pbGVzIGFoZWFkPC9oMz4KICAgICAgICA8L3Ytcm93PgogICAgICAgIDx2LXJvdz4KICAgICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgPHJvYWRtYXAtY2FyZCA6aXRlbXM9InByZVNlYXNvbkNhcmQuaXRlbXMiIDp0aXRsZT0icHJlU2Vhc29uQ2FyZC50aXRsZSI+PC9yb2FkbWFwLWNhcmQ+CiAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgPHYtY29sPgogICAgICAgICAgICA8cm9hZG1hcC1jYXJkIDppdGVtcz0ibGF1bmNocGFkU2Vhc29uQ2FyZC5pdGVtcyIgOnRpdGxlPSJsYXVuY2hwYWRTZWFzb25DYXJkLnRpdGxlIj48L3JvYWRtYXAtY2FyZD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgIDxyb2FkbWFwLWNhcmQgOml0ZW1zPSJzdHJlYW1pbmdTZWFzb25DYXJkLml0ZW1zIiA6dGl0bGU9InN0cmVhbWluZ1NlYXNvbkNhcmQudGl0bGUiPjwvcm9hZG1hcC1jYXJkPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICA8L3Ytcm93PgogICAgICAgIDx2LXJvdyBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiIHN0eWxlPSJjb2xvcjp3aGl0ZTsgbWFyZ2luLXRvcDogNTBweDsiPgogICAgICAgICAgPGgxPldobydzIGpvaW5pbmcgdGhlIG1vdmVtZW50PC9oMT4KICAgICAgICA8L3Ytcm93PgogICAgICAgIDx2LXJvdyBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiIHN0eWxlPSJjb2xvcjp3aGl0ZTsgbWFyZ2luLXRvcDogNTBweDsiPgogICAgICAgICAgPHYtY29sPjwvdi1jb2w+CiAgICAgICAgICA8di1jb2wgc3R5bGU9Im1hcmdpbi1sZWZ0OiA1JTsiPgogICAgICAgICAgICA8di1hdmF0YXIgY29sb3I9IiMxQjE4MTEiIHNpemU9IjEzMCI+CiAgICAgICAgICAgICAgUGljdHVyZQogICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgPHYtYXZhdGFyIGNvbG9yPSIjMUIxODExIiBzaXplPSIxMzAiPgogICAgICAgICAgICAgIFBpY3R1cmUKICAgICAgICAgICAgPC92LWF2YXRhcj4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgIDx2LWF2YXRhciBjb2xvcj0iIzFCMTgxMSIgc2l6ZT0iMTMwIj4KICAgICAgICAgICAgICBQaWN0dXJlCiAgICAgICAgICAgIDwvdi1hdmF0YXI+CiAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgPHYtY29sPgogICAgICAgICAgICA8di1hdmF0YXIgY29sb3I9IiMxQjE4MTEiIHNpemU9IjEzMCI+CiAgICAgICAgICAgICAgUGljdHVyZQogICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDx2LWNvbD48L3YtY29sPgogICAgICAgIDwvdi1yb3c+CiAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciIgc3R5bGU9ImNvbG9yOndoaXRlOyBtYXJnaW4tdG9wOiA1MHB4OyI+CiAgICAgICAgICA8aDE+U3RyaW8gY29yZSB0ZWFtPC9oMT4KICAgICAgICA8L3Ytcm93PgogICAgICAgIDx2LXJvdyBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiIHN0eWxlPSJjb2xvcjp3aGl0ZTsgbWFyZ2luLXRvcDogNTBweDsiPgogICAgICAgICAgPHYtY29sPjwvdi1jb2w+CiAgICAgICAgICA8di1jb2wgc3R5bGU9Im1hcmdpbi1sZWZ0OiA1JTsiPgogICAgICAgICAgICA8di1hdmF0YXIgY29sb3I9IiMxQjE4MTEiIHNpemU9IjEzMCI+CiAgICAgICAgICAgICAgUGljdHVyZQogICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgPHYtYXZhdGFyIGNvbG9yPSIjMUIxODExIiBzaXplPSIxMzAiPgogICAgICAgICAgICAgIFBpY3R1cmUKICAgICAgICAgICAgPC92LWF2YXRhcj4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgIDx2LWF2YXRhciBjb2xvcj0iIzFCMTgxMSIgc2l6ZT0iMTMwIj4KICAgICAgICAgICAgICBQaWN0dXJlCiAgICAgICAgICAgIDwvdi1hdmF0YXI+CiAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgPHYtY29sPgogICAgICAgICAgICA8di1hdmF0YXIgY29sb3I9IiMxQjE4MTEiIHNpemU9IjEzMCI+CiAgICAgICAgICAgICAgUGljdHVyZQogICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDx2LWNvbD48L3YtY29sPgogICAgICAgIDwvdi1yb3c+CiAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciIgc3R5bGU9ImNvbG9yOndoaXRlOyBtYXJnaW4tdG9wOiA1MHB4OyI+CiAgICAgICAgICA8aDE+U3RyaW8gcGFydG5lcnM8L2gxPgogICAgICAgIDwvdi1yb3c+CiAgICAgICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciIgc3R5bGU9ImNvbG9yOndoaXRlOyBtYXJnaW4tdG9wOiA1MHB4OyBtYXJnaW4tYm90dG9tOiAxMDBweDsiPgogICAgICAgICAgPHYtY29sPjwvdi1jb2w+CiAgICAgICAgICA8di1jb2wgc3R5bGU9Im1hcmdpbi1sZWZ0OiA1JTsiPgogICAgICAgICAgICA8di1hdmF0YXIgY29sb3I9IiMxQjE4MTEiIHNpemU9IjEzMCI+CiAgICAgICAgICAgICAgUGljdHVyZQogICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgPHYtYXZhdGFyIGNvbG9yPSIjMUIxODExIiBzaXplPSIxMzAiPgogICAgICAgICAgICAgIFBpY3R1cmUKICAgICAgICAgICAgPC92LWF2YXRhcj4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8di1jb2w+CiAgICAgICAgICAgIDx2LWF2YXRhciBjb2xvcj0iIzFCMTgxMSIgc2l6ZT0iMTMwIj4KICAgICAgICAgICAgICBQaWN0dXJlCiAgICAgICAgICAgIDwvdi1hdmF0YXI+CiAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgPHYtY29sPgogICAgICAgICAgICA8di1hdmF0YXIgY29sb3I9IiMxQjE4MTEiIHNpemU9IjEzMCI+CiAgICAgICAgICAgICAgUGljdHVyZQogICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDx2LWNvbD48L3YtY29sPgogICAgICAgIDwvdi1yb3c+CiAgICAgIDwvdi1jb2w+CiAgICA8L3Ytcm93PgogICAgPHYtcm93IGlkPSJwYWdlNyI+CiAgICAgIDx2LWNvbD4KICAgICAgICA8di1yb3cgcmVmPSJwb3J0byIganVzdGlmeT0iY2VudGVyIiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgIDxoMSBzdHlsZT0ibWFyZ2luLXRvcDogNzBweDsgbWFyZ2luLWJvdHRvbTogMzBweDsiPktub3cgbW9yZSBhYm91dCBTdHJpbzwvaDE+CiAgICAgICAgPC92LXJvdz4KICAgICAgICA8di1yb3cganVzdGlmeT0iY2VudGVyIiBhbGlnbj0iY2VudGVyIj4KICAgICAgICAgIDx2LWJ0biBocmVmPSJodHRwczovL21lZGl1bS5jb20vc3RyaW8tZGFvIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9Im1yLTQgYnV0dG9uMSIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNFRjQ0MjM7IGNvbG9yOiB3aGl0ZTsgaGVpZ2h0OiA1MHB4OyBmb250LXNpemU6IDE1cHg7IGZvbnQtZmFtaWx5OiBBaWxlcm9uOyBtYXJnaW4tYm90dG9tOiAxMDBweDsiPgogICAgICAgICAgICA8c3BhbiBzdHlsZT0ibWFyZ2luLXJpZ2h0OjEwcHg7Ij5NZWRpdW0gcGFnZTwvc3Bhbj4KICAgICAgICAgICAgPHYtaWNvbiBzdHlsZT0iaGVpZ2h0OjVweDsiPm1kaS1hcnJvdy1yaWdodDwvdi1pY29uPgogICAgICAgICAgPC92LWJ0bj4KICAgICAgICA8L3Ytcm93PgogICAgICA8L3YtY29sPgogICAgPC92LXJvdz4KICA8L3YtY29sPgo="},null]}